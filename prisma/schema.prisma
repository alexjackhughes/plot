// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventType {
  MovingMachinery
  UnauthorisedAccess
  PreventativeProtectiveEquipment
  HandArmVibration
  LoudNoise
}

enum AuthorizationLevel {
  worker
  dashboard
  admin
  inactive
}

enum Descriptor {
  SmallMachine
  MediumMachine
  LargeMachine

  SmallPPE
  MediumPPE
  LargePPE

  SmallUnauthorised
  MediumUnauthorised
  LargeUnauthorised
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  email          String?  @unique
  firstName      String?  @map("first_name")
  lastName       String?  @map("last_name")
  avatarUrl      String?  @map("avatar_url")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  wearableId String?   @unique
  wearable   Wearable? @relation(fields: [wearableId], references: [id])

  authorization AuthorizationLevel
  organization  Organization       @relation(fields: [organizationId], references: [id])
  events        Event[]

  @@map("users")
}

model Organization {
  id                  String   @id @default(dbgenerated("gen_random_uuid()"))
  name                String   @unique
  websiteUrl          String?  @map("website_url")
  industry            String
  avatarUrl           String?  @map("avatar_url")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  description         String?
  location            String?
  size                Int?
  primaryContactEmail String?  @map("primary_contact_email")
  contractLength      Int?     @map("contract_length")

  allowList        OrganizationAllowList[]
  users            User[]
  wearables        Wearable[]
  beacons          Beacon[]
  chargingStations ChargingStation[]
  events           Event[]
  beaconTypes      BeaconType[]

  // PPE Zone Proximity Distances
  ppeZoneSmall  Int @default(2)
  ppeZoneMedium Int @default(3)
  ppeZoneLarge  Int @default(10)

  // Unauthorised Zone Proximity Distances
  unauthorisedZoneSmall  Int @default(2)
  unauthorisedZoneMedium Int @default(3)
  unauthorisedZoneLarge  Int @default(10)

  // Machine Proximity Distances
  machineSmall  Int @default(2)
  machineMedium Int @default(3)
  machineLarge  Int @default(10)

  @@index([primaryContactEmail], name: "idx_organization_primary_contact")
  @@map("organizations")
}

model OrganizationAllowList {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([email, organizationId])
  @@map("organization_allow_list")
}

model BeaconType {
  id         String     @id @default(dbgenerated("gen_random_uuid()"))
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  descriptor Descriptor
  allowList  Wearable[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  Beacon         Beacon[]

  @@unique([descriptor, organizationId])
  @@map("beacon_type")
}

model Wearable {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?
  displayId   String?  @unique

  user   User?
  userId String? @unique

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  events Event[]

  beacon   Beacon? @relation(fields: [beaconId], references: [id])
  beaconId String?

  // Why would a wearable need a beacon type?
  BeaconType   BeaconType? @relation(fields: [beaconTypeId], references: [id])
  beaconTypeId String?

  @@index([organizationId], name: "idx_wearable_organization")
  @@index([userId], name: "idx_wearable_user")
  @@index([beaconId], name: "idx_wearable_beacon")
  @@map("wearables")
}

model Beacon {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  type        EventType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  displayName String?
  displayId   String?

  beaconType   BeaconType? @relation(fields: [beaconTypeId], references: [id])
  beaconTypeId String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  events   Event[]
  Wearable Wearable[]

  @@index([organizationId], name: "idx_beacon_organization")
  @@map("beacons")
}

model ChargingStation {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String?
  displayId   String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId], name: "idx_charging_station_organization")
  @@map("charging_stations")
}

model Event {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  timestamp      DateTime
  eventType      EventType
  deviceId       String?
  beaconId       String?
  userId         String?
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  duration       Int
  severity       Int? // 10 being severe, but also allowing us in future to have different levels of severity

  user         User?        @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  wearable     Wearable?    @relation(fields: [deviceId], references: [id])
  beacon       Beacon?      @relation(fields: [beaconId], references: [id])

  @@index([organizationId, timestamp], name: "idx_event_organization_timestamp")
  @@index([duration], name: "idx_event_duration")
  @@map("events")
}
